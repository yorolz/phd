
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.tree.DefaultMutableTreeNode;
/*
 * jMapperGui.java
 *
 * Created on 2 de Fevereiro de 2008, 10:18
 */
import javax.swing.tree.DefaultTreeCellRenderer;

import ca.odell.glazedlists.BasicEventList;
import ca.odell.glazedlists.EventList;
import ca.odell.glazedlists.GlazedLists;
import ca.odell.glazedlists.SortedList;
import ca.odell.glazedlists.gui.TableFormat;
import ca.odell.glazedlists.swing.EventTableModel;
import ca.odell.glazedlists.swing.TableComparatorChooser;

/**
 *
 * @author rC
 */
@SuppressWarnings({ "rawtypes", "unchecked" })
public class jMapperGui extends javax.swing.JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = -6585061094830432322L;

	/** Creates new form jMapperGui */
	public jMapperGui() {
		try {
			initComponents();

			// UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
			SwingUtilities.updateComponentTreeUI(this);

			// Create the nodes for vehicle ontology.
			DefaultMutableTreeNode top = createNodes("ontologies", "ontologies");

			vehicleJtree = new javax.swing.JTree(top);
			tenorJtree = new javax.swing.JTree(top);

			vehicleJtreeScroll.setViewportView(vehicleJtree);

			tenorJtreeScroll.setViewportView(tenorJtree);

			// Set the icon for leaf nodes.
			ImageIcon leafIcon = new ImageIcon("images/ontology.png");
			if (leafIcon != null) {
				DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
				renderer.setLeafIcon(leafIcon);
				tenorJtree.setCellRenderer(renderer);
				vehicleJtree.setCellRenderer(renderer);
			}

			Image img = Toolkit.getDefaultToolkit().getImage("images/jMapperLogo.png");
			setIconImage(img);

			prepareMappingsTable();

			// Get the screen size
			Toolkit toolkit = Toolkit.getDefaultToolkit();
			Dimension screenSize = toolkit.getScreenSize();

			// Calculate the frame location
			int x = (screenSize.width - this.getWidth()) / 2;
			int y = (screenSize.height - this.getHeight()) / 2;

			// Set the new frame location
			this.setLocation(x, y);

		} catch (ClassNotFoundException ex) {
			Logger.getLogger(jMapperGui.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			Logger.getLogger(jMapperGui.class.getName()).log(Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			Logger.getLogger(jMapperGui.class.getName()).log(Level.SEVERE, null, ex);
		} catch (UnsupportedLookAndFeelException ex) {
			Logger.getLogger(jMapperGui.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form
	 * Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jMapperTabs = new javax.swing.JTabbedPane();
		Main = new javax.swing.JPanel();
		domainOntologies = new javax.swing.JPanel();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		nameTenorOnto = new javax.swing.JLabel();
		nameVehicleOnto = new javax.swing.JLabel();
		vehicleJtreeScroll = new javax.swing.JScrollPane();
		vehicleJtree = new javax.swing.JTree();
		tenorJtreeScroll = new javax.swing.JScrollPane();
		tenorJtree = new javax.swing.JTree();
		mappings = new javax.swing.JPanel();
		jScrollPane2 = new javax.swing.JScrollPane();
		jTable1 = new javax.swing.JTable();
		statusLabel = new javax.swing.JLabel();
		ExportButton = new javax.swing.JButton();
		runPanel = new javax.swing.JPanel();
		run = new javax.swing.JButton();
		mappingStrengthText = new javax.swing.JTextField();
		mappingStrengthLabel = new javax.swing.JLabel();
		mappingStrengthMinText = new javax.swing.JTextField();
		mappingStrengthMinLabel = new javax.swing.JLabel();
		similarityAmountLabel = new javax.swing.JLabel();
		similarityAmountText = new javax.swing.JTextField();
		strongersCheckBox = new javax.swing.JCheckBox();
		jPanel1 = new javax.swing.JPanel();
		jScrollPane1 = new javax.swing.JScrollPane();
		reportEditorPane = new javax.swing.JEditorPane();
		jPanel2 = new javax.swing.JPanel();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("jMapper - v0.5");
		// setResizable(false);
		getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

		jMapperTabs.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

		domainOntologies.setBorder(javax.swing.BorderFactory.createTitledBorder("Domain Ontologies"));

		jLabel2.setText("Tenor Ontology:");

		jLabel3.setText("Vehicle Ontology:");

		vehicleJtreeScroll.setViewportView(vehicleJtree);

		tenorJtreeScroll.setViewportView(tenorJtree);

		javax.swing.GroupLayout domainOntologiesLayout = new javax.swing.GroupLayout(domainOntologies);
		domainOntologies.setLayout(domainOntologiesLayout);
		domainOntologiesLayout
				.setHorizontalGroup(
						domainOntologiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(domainOntologiesLayout.createSequentialGroup().addContainerGap()
										.addGroup(domainOntologiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(domainOntologiesLayout.createSequentialGroup().addComponent(jLabel2).addGap(84, 84, 84).addComponent(nameTenorOnto,
														javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE))
												.addComponent(tenorJtreeScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGap(73, 73, 73)
										.addGroup(domainOntologiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel3)
												.addComponent(vehicleJtreeScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(nameVehicleOnto, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)));
		domainOntologiesLayout.setVerticalGroup(domainOntologiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(domainOntologiesLayout.createSequentialGroup().addGap(25, 25, 25).addComponent(nameVehicleOnto).addContainerGap(229, Short.MAX_VALUE))
				.addGroup(domainOntologiesLayout.createSequentialGroup()
						.addGroup(domainOntologiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(domainOntologiesLayout.createSequentialGroup().addGap(2, 2, 2).addComponent(jLabel2)).addComponent(nameTenorOnto,
										javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(tenorJtreeScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
				.addGroup(domainOntologiesLayout.createSequentialGroup().addComponent(jLabel3).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(vehicleJtreeScroll, 0, 0, Short.MAX_VALUE).addContainerGap()));

		mappings.setBorder(javax.swing.BorderFactory.createTitledBorder("Mappings"));

		jScrollPane2.setAutoscrolls(true);

		jTable1.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] { { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null } },
				new String[] { "Tenor Concept", "Vehicle Concept", "Strength", "Similarities" }) {
			private static final long serialVersionUID = 2772071146866194184L;
			Class[] types = new Class[] { java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class };
			boolean[] canEdit = new boolean[] { false, false, false, false };

			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
		jTable1.setAutoscrolls(false);
		jScrollPane2.setViewportView(jTable1);

		statusLabel.setForeground(new java.awt.Color(153, 153, 153));
		statusLabel.setText("Status:");

		ExportButton.setText("Export...");
		ExportButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				ExportButtonActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout mappingsLayout = new javax.swing.GroupLayout(mappings);
		mappings.setLayout(mappingsLayout);
		mappingsLayout.setHorizontalGroup(mappingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(mappingsLayout.createSequentialGroup().addContainerGap()
						.addGroup(mappingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 664, Short.MAX_VALUE)
								.addGroup(mappingsLayout.createSequentialGroup()
										.addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 578, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(ExportButton)))
						.addContainerGap()));
		mappingsLayout.setVerticalGroup(mappingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
				mappingsLayout.createSequentialGroup().addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addGroup(mappingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(ExportButton))));

		runPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

		run.setText("Run");
		run.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mousePressed(java.awt.event.MouseEvent evt) {
				runMousePressed(evt);
			}
		});

		mappingStrengthText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
		mappingStrengthText.setText("0.5");
		mappingStrengthText.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mappingStrengthTextActionPerformed(evt);
			}
		});

		mappingStrengthLabel.setText("mapping strength(min):");

		mappingStrengthMinText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
		mappingStrengthMinText.setText("0.3");
		mappingStrengthMinText.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mappingStrengthMinTextActionPerformed(evt);
			}
		});

		mappingStrengthMinLabel.setText("mapping strength(lowest):");

		similarityAmountLabel.setText("similarity amount:");

		similarityAmountText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
		similarityAmountText.setText("3");
		similarityAmountText.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				similarityAmountTextActionPerformed(evt);
			}
		});

		strongersCheckBox.setSelected(true);
		strongersCheckBox.setText("strongers");
		strongersCheckBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				strongersCheckBoxActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout runPanelLayout = new javax.swing.GroupLayout(runPanel);
		runPanel.setLayout(runPanelLayout);
		runPanelLayout.setHorizontalGroup(runPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(runPanelLayout.createSequentialGroup().addGap(18, 18, 18).addComponent(mappingStrengthLabel)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(mappingStrengthText, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(18, 18, 18)
						.addComponent(mappingStrengthMinLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(mappingStrengthMinText, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(18, 18, 18)
						.addComponent(similarityAmountLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(similarityAmountText, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(27, 27, 27)
						.addComponent(strongersCheckBox).addGap(27, 27, 27).addComponent(run).addContainerGap(20, Short.MAX_VALUE)));
		runPanelLayout.setVerticalGroup(runPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(runPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(mappingStrengthLabel)
						.addComponent(mappingStrengthText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addComponent(run, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(mappingStrengthMinLabel)
						.addComponent(mappingStrengthMinText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addComponent(similarityAmountLabel)
						.addComponent(similarityAmountText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addComponent(strongersCheckBox)));

		javax.swing.GroupLayout MainLayout = new javax.swing.GroupLayout(Main);
		Main.setLayout(MainLayout);
		MainLayout.setHorizontalGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(MainLayout.createSequentialGroup().addContainerGap()
						.addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(runPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(domainOntologies, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(mappings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
						.addContainerGap()));
		MainLayout.setVerticalGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(MainLayout.createSequentialGroup().addContainerGap()
						.addComponent(domainOntologies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(runPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(mappings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(30, Short.MAX_VALUE)));

		jMapperTabs.addTab("Main", Main);

		reportEditorPane.setEditable(false);
		jScrollPane1.setViewportView(reportEditorPane);

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane1,
				javax.swing.GroupLayout.DEFAULT_SIZE, 716, Short.MAX_VALUE));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE,
				620, Short.MAX_VALUE));

		jMapperTabs.addTab("Report", jPanel1);

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 716, Short.MAX_VALUE));
		jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 620, Short.MAX_VALUE));

		jMapperTabs.addTab("Help", jPanel2);

		getContentPane().add(jMapperTabs);
		jMapperTabs.getAccessibleContext().setAccessibleName("Main");

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private DefaultMutableTreeNode createNodes(String total, String actual) {
		DefaultMutableTreeNode category = null;

		try {

			category = new DefaultMutableTreeNode(actual);

			File dir = new File(total);

			String[] children = dir.list();
			if (children == null) {
				System.err.println("Problem when trying to read ontologies (1)");
			} else {
				String local;
				for (int i = 0; i < children.length; i++) {
					// Get filename of file or directory
					String filename = children[i];

					local = total + "/" + filename;

					File check1 = new File(local);
					String[] check2 = check1.list();

					if (check2 != null) { // Check sub-directory
						category.add(createNodes(local, filename));
					} else { // Add ontology
								// if(filename.endsWith("."))
						category.add(new DefaultMutableTreeNode(filename));
					}
				}
			}
		} catch (Exception e) {
			System.err.println("Problem when trying to read ontologies (2)");
		}

		return category;
	}

	private void runMousePressed(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_runMousePressed
		ArrayList<String> ve, te;
		ArrayList<Mapping> res;
		String ste, sve;

		jMapper m;

		String tenorPath = tenorJtree.getSelectionPath().toString();
		tenorPath = tenorPath.replaceAll(", ", "/");
		tenorPath = tenorPath.substring(1, tenorPath.length() - 1);

		ste = readFile(tenorPath);
		te = arrangeString(ste);
		String domainTen = new StringTokenizer(tenorPath, ".", false).nextToken();

		String vehiclePath = vehicleJtree.getSelectionPath().toString();
		vehiclePath = vehiclePath.replaceAll(", ", "/");
		vehiclePath = vehiclePath.substring(1, vehiclePath.length() - 1);

		sve = readFile(vehiclePath);
		ve = arrangeString(sve);
		String domainVei = new StringTokenizer(vehiclePath, ".", false).nextToken();

		m = new jMapper();
		m.setAnalogyTax(Double.parseDouble(mappingStrengthText.getText()));
		m.setLowest_analogyTax(Double.parseDouble(mappingStrengthMinText.getText()));
		m.setDepth(Integer.parseInt(similarityAmountText.getText()));
		m.setStrongers(isStrongersSelected());

		m.set_graphs(ve, te);
		res = m.run_mapper4GUI(this);
		writeInTable(res, domainTen, domainVei);

	}// GEN-LAST:event_runMousePressed

	private void ExportButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ExportButtonActionPerformed
	}// GEN-LAST:event_ExportButtonActionPerformed

	private void mappingStrengthTextActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_mappingStrengthTextActionPerformed
	}// GEN-LAST:event_mappingStrengthTextActionPerformed

	private void mappingStrengthMinTextActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_mappingStrengthMinTextActionPerformed
	}// GEN-LAST:event_mappingStrengthMinTextActionPerformed

	private void similarityAmountTextActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_similarityAmountTextActionPerformed
	}// GEN-LAST:event_similarityAmountTextActionPerformed

	private void strongersCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_strongersCheckBoxActionPerformed
	}// GEN-LAST:event_strongersCheckBoxActionPerformed

	public boolean isStrongersSelected() {
		return strongersCheckBox.isSelected();
	}

	private void prepareMappingsTable() {
		// build a JTable
		String[] propertyNames = { "recursive_level", "tenorConcept", "vehicleConcept", "strength", "similarities" };
		String[] columnLabels = { "lvl", "Tenor Concept", "Vehicle Concept", "Strength", "Similarities" };

		// create an EventList of Mappings
		final EventList mappingsEventList = new BasicEventList();

		mappingsList = new SortedList(mappingsEventList, null);

		TableFormat tf = GlazedLists.tableFormat(TableMappings.class, propertyNames, columnLabels);

		jTable1.setModel(new EventTableModel(mappingsList, tf));

		TableComparatorChooser tcc = new TableComparatorChooser(jTable1, mappingsList, true);
		tcc.clearComparator();
		tcc.appendComparator(0, 0, false);
		tcc.appendComparator(3, 0, true);
	}

	String sGlobal = "";

	public void appendReport(String s) {
		reportEditorPane.setContentType("text/html");
		sGlobal += s;
		this.reportEditorPane.setText("<html><body>" + sGlobal + "<br></body></html>");
	}

	private void writeInTable(ArrayList<Mapping> res, String domainTen, String domainVei) {
		String[][] table = new String[res.size()][5];
		for (int i = 0; i < res.size(); i++) {

			Mapping m = (Mapping) res.get(i);

			String sim = "";
			for (int j = 1; j < m.maplist.size(); j++)
				sim += ((Pair) m.maplist.get(j)).source.concept + ",";

			sim = sim.substring(0, sim.length() - 1);

			table[i][0] = "    " + ((Pair) m.maplist.get(0)).getRecursive_level() + "   ";
			table[i][1] = ((Pair) m.maplist.get(0)).source.concept;
			table[i][2] = ((Pair) m.maplist.get(0)).target.concept;
			table[i][3] = "" + m.value;
			table[i][4] = sim;
		}

		// Write in jtable
		mappingsList.clear();

		for (int i = 0; i < table.length; i++)
			mappingsList.add(new TableMappings(table[i][0], table[i][1], table[i][2], table[i][3], table[i][4]));

		AutoFitTableColumns.autoResizeTable(jTable1, true);

		if (table.length == 0)
			statusLabel.setText("Status: Weren't found mappings.");
		else if (table.length == 1)
			statusLabel.setText("Status: Was found 1 mapping.");
		else
			statusLabel.setText("Status: Were found " + table.length + " mappings.");
	}

	private ArrayList<String> arrangeString(String input) {
		ArrayList<String> strings = new ArrayList<String>();

		String[] tokens = input.split("\\.");

		for (int i = 0; i < tokens.length; i++)
			strings.add(tokens[i]);

		return strings;
	}

	private String readFile(String file) {

		// String res = "[";
		String res = "";
		Scanner sc = null;

		try {
			sc = new Scanner(new File(file));
		} catch (Exception e) {
			return "[]";
		}

		while (sc.hasNextLine()) {
			res = res + sc.nextLine();
		}

		// res = res + "]";
		sc.close();
		return res;
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		// System.out.println(System.getProperty("user.dir"));
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new jMapperGui().setVisible(true);
			}
		});
	}

	private SortedList mappingsList;

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton ExportButton;
	private javax.swing.JPanel Main;
	private javax.swing.JPanel domainOntologies;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JTabbedPane jMapperTabs;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JTable jTable1;
	private javax.swing.JLabel mappingStrengthLabel;
	private javax.swing.JLabel mappingStrengthMinLabel;
	private javax.swing.JTextField mappingStrengthMinText;
	private javax.swing.JTextField mappingStrengthText;
	private javax.swing.JPanel mappings;
	private javax.swing.JLabel nameTenorOnto;
	private javax.swing.JLabel nameVehicleOnto;
	private javax.swing.JEditorPane reportEditorPane;
	private javax.swing.JButton run;
	private javax.swing.JPanel runPanel;
	private javax.swing.JLabel similarityAmountLabel;
	private javax.swing.JTextField similarityAmountText;
	private javax.swing.JLabel statusLabel;
	private javax.swing.JCheckBox strongersCheckBox;
	private javax.swing.JTree tenorJtree;
	private javax.swing.JScrollPane tenorJtreeScroll;
	private javax.swing.JTree vehicleJtree;
	private javax.swing.JScrollPane vehicleJtreeScroll;
	// End of variables declaration//GEN-END:variables

	public static class TableMappings {
		private String tenorConcept;
		private String vehicleConcept;
		private String strength;
		private String similarities;
		private String recursive_level;

		public TableMappings(String recursive_level, String tenorConcept, String vehicleConcept, String strength, String similarities) {
			this.tenorConcept = tenorConcept;
			this.vehicleConcept = vehicleConcept;
			this.strength = strength;
			this.similarities = similarities;
			this.recursive_level = recursive_level;
		}

		public String getRecursive_level() {
			return recursive_level;
		}

		public void setRecursive_level(String recursive_level) {
			this.recursive_level = recursive_level;
		}

		public void setSimilarities(String similarities) {
			this.similarities = similarities;
		}

		public void setStrength(String strength) {
			this.strength = strength;
		}

		public void setTenorConcept(String tenorConcept) {
			this.tenorConcept = tenorConcept;
		}

		public void setVehicleConcept(String vehicleConcept) {
			this.vehicleConcept = vehicleConcept;
		}

		public String getSimilarities() {
			return similarities;
		}

		public String getStrength() {
			return strength;
		}

		public String getTenorConcept() {
			return tenorConcept;
		}

		public String getVehicleConcept() {
			return vehicleConcept;
		}

	}
}
